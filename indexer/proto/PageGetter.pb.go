// Code generated by protoc-gen-go.
// source: PageGetter.proto
// DO NOT EDIT!

/*
Package PageGetter is a generated protocol buffer package.

It is generated from these files:
	PageGetter.proto

It has these top-level messages:
	Result
	Request
	Search
*/
package PageGetter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result struct {
	Urls []string `protobuf:"bytes,1,rep,name=urls" json:"urls,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type Request struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Search *Search `protobuf:"bytes,2,opt,name=search" json:"search,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetSearch() *Search {
	if m != nil {
		return m.Search
	}
	return nil
}

type Search struct {
	Or     *Search_Or  `protobuf:"bytes,1,opt,name=or" json:"or,omitempty"`
	And    *Search_And `protobuf:"bytes,2,opt,name=and" json:"and,omitempty"`
	Term   string      `protobuf:"bytes,3,opt,name=term" json:"term,omitempty"`
	Phrase string      `protobuf:"bytes,4,opt,name=phrase" json:"phrase,omitempty"`
}

func (m *Search) Reset()                    { *m = Search{} }
func (m *Search) String() string            { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()               {}
func (*Search) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Search) GetOr() *Search_Or {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *Search) GetAnd() *Search_And {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *Search) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Search) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

type Search_Or struct {
	Search []*Search `protobuf:"bytes,1,rep,name=search" json:"search,omitempty"`
}

func (m *Search_Or) Reset()                    { *m = Search_Or{} }
func (m *Search_Or) String() string            { return proto.CompactTextString(m) }
func (*Search_Or) ProtoMessage()               {}
func (*Search_Or) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Search_Or) GetSearch() []*Search {
	if m != nil {
		return m.Search
	}
	return nil
}

type Search_And struct {
	Search []*Search `protobuf:"bytes,1,rep,name=search" json:"search,omitempty"`
}

func (m *Search_And) Reset()                    { *m = Search_And{} }
func (m *Search_And) String() string            { return proto.CompactTextString(m) }
func (*Search_And) ProtoMessage()               {}
func (*Search_And) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *Search_And) GetSearch() []*Search {
	if m != nil {
		return m.Search
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Search)(nil), "Search")
	proto.RegisterType((*Search_Or)(nil), "Search.Or")
	proto.RegisterType((*Search_And)(nil), "Search.And")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for PageGetter service

type PageGetterClient interface {
	GetPagesFromQuery(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error)
}

type pageGetterClient struct {
	c           client.Client
	serviceName string
}

func NewPageGetterClient(serviceName string, c client.Client) PageGetterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pagegetter"
	}
	return &pageGetterClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *pageGetterClient) GetPagesFromQuery(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.serviceName, "PageGetter.GetPagesFromQuery", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageGetter service

type PageGetterHandler interface {
	GetPagesFromQuery(context.Context, *Request, *Result) error
}

func RegisterPageGetterHandler(s server.Server, hdlr PageGetterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PageGetter{hdlr}, opts...))
}

type PageGetter struct {
	PageGetterHandler
}

func (h *PageGetter) GetPagesFromQuery(ctx context.Context, in *Request, out *Result) error {
	return h.PageGetterHandler.GetPagesFromQuery(ctx, in, out)
}

func init() { proto.RegisterFile("PageGetter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x6d, 0xba, 0xa4, 0xee, 0x14, 0x44, 0xe7, 0x20, 0xa1, 0x28, 0x96, 0x82, 0xd2, 0x53,
	0x0e, 0x15, 0x3c, 0x78, 0xdb, 0x8b, 0x7b, 0x5c, 0x8d, 0x4f, 0x50, 0xcd, 0xe0, 0x2e, 0xec, 0x36,
	0xeb, 0x24, 0x3d, 0xf8, 0x72, 0x3e, 0x9b, 0x34, 0x1b, 0x51, 0xf0, 0xe0, 0x6d, 0xe6, 0xcb, 0x24,
	0xf9, 0xe7, 0x83, 0xd3, 0xc7, 0xfe, 0x8d, 0x96, 0x14, 0x02, 0xb1, 0xde, 0xb3, 0x0b, 0xae, 0xb9,
	0x00, 0x69, 0xc8, 0x8f, 0xdb, 0x80, 0x08, 0xb3, 0x91, 0xb7, 0x5e, 0x65, 0x75, 0xde, 0xce, 0x4d,
	0xac, 0x9b, 0x7b, 0x28, 0x0c, 0xbd, 0x8f, 0xe4, 0x03, 0x9e, 0x80, 0xd8, 0x58, 0x95, 0xd5, 0x59,
	0x3b, 0x37, 0x62, 0x63, 0xf1, 0x0a, 0xa4, 0xa7, 0x9e, 0x5f, 0xd7, 0x4a, 0xd4, 0x59, 0x5b, 0x76,
	0x85, 0x7e, 0x8e, 0xad, 0x49, 0xb8, 0xf9, 0xcc, 0x40, 0x1e, 0x10, 0x56, 0x20, 0x1c, 0xc7, 0xbb,
	0x65, 0x07, 0x69, 0x4e, 0xaf, 0xd8, 0x08, 0xc7, 0x78, 0x09, 0x79, 0x3f, 0xd8, 0xf4, 0x48, 0xf9,
	0x7d, 0xb8, 0x18, 0xac, 0x99, 0xf8, 0x94, 0x2a, 0x10, 0xef, 0x54, 0x1e, 0x3f, 0x8e, 0x35, 0x9e,
	0x83, 0xdc, 0xaf, 0xb9, 0xf7, 0xa4, 0x66, 0x91, 0xa6, 0xae, 0xba, 0x06, 0xb1, 0xe2, 0x5f, 0xc1,
	0xa6, 0x4d, 0xfe, 0x06, 0xab, 0x6e, 0x20, 0x5f, 0x0c, 0xf6, 0xdf, 0xb9, 0xee, 0x0e, 0xe0, 0x47,
	0x17, 0xb6, 0x70, 0xb6, 0xa4, 0x30, 0x01, 0xff, 0xc0, 0x6e, 0xf7, 0x34, 0x12, 0x7f, 0xe0, 0xb1,
	0x4e, 0x7a, 0xaa, 0x42, 0x1f, 0x34, 0x36, 0x47, 0x2f, 0x32, 0x9a, 0xbd, 0xfd, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0xf9, 0xcc, 0x51, 0x6d, 0x01, 0x00, 0x00,
}
